{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["API_KEY","API_Domain","ObjectStateFactory","data","isArray","DataResult","forEach","el","state","App","useState","list","setList","dataForPost","setDataForPost","postResponse","setPostResponse","className","onClick","axios","get","then","DataMass","PostData","element","availability","hasOwnProperty","push","email","date","length","sort","a","b","bestDates","attendees","post","response","success","catch","error","console","log","map","firstName","lastName","item","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"qQAGMA,EAAU,uCACVC,EAAa,6CAEbC,EAAqB,SAACC,EAAMC,GAChC,IAAMC,EAAa,GAInB,OAHAF,EAAKG,SAAQ,SAAAC,GACXF,EAAWE,EAAGC,OAASJ,EAAU,GAAK,MAEjCC,GAmHMI,MAhHf,WAAgB,IAAD,EAEWC,qBAFX,mBAENC,EAFM,KAEAC,EAFA,OAGyBF,qBAHzB,mBAGNG,EAHM,KAGOC,EAHP,OAI2BJ,qBAJ3B,mBAINK,EAJM,KAIQC,EAJR,KAsEb,OACE,yBAAKC,UAAU,OACb,4BAAQC,QAPI,WACdC,IAAMC,IAAN,UAAanB,EAAb,6DAA4ED,IACzEqB,MAAK,YAAe,IAAZlB,EAAW,EAAXA,KAAaS,EAAQT,QAK9B,YACCQ,GAAQ,4BAAQO,QAzDJ,WAEb,IAAMb,EAAaH,EAAmBS,GAChCW,EAAWpB,EAAmBS,GAAK,GACrCY,EAAW,GAYf,IAAI,IAAIf,KAVRG,EAAKL,SAAQ,SAAAkB,GACXA,EAAQC,aAAanB,SAAQ,SAAAmB,GAC3BpB,EAAWmB,EAAQhB,OAAOkB,eAAeD,GAEvCpB,EAAWmB,EAAQhB,OAAOiB,GAAcE,KAAKH,EAAQI,OAErDvB,EAAWmB,EAAQhB,OAAOiB,GAAgB,CAACD,EAAQI,aAIxCvB,EACf,IAAI,IAAIwB,KAAQxB,EAAWG,GACzBc,EAASd,GAAOmB,KAAK,CAACG,OAAQzB,EAAWG,GAAOqB,GAAMC,OAAQD,KAAMA,IAIxE,IAAI,IAAIrB,KAASH,EACfiB,EAASd,GAAOuB,MAAK,SAACC,EAAGC,GACvB,OAAID,EAAEF,OAASG,EAAEH,OACR,EAELE,EAAEF,OAASG,EAAEH,QACP,EAEH,KAIX,IAAI,IAAItB,KAASH,EACfkB,EAASI,KAAK,CACZnB,QACA0B,UAAW,CACP,CACEL,KAAMP,EAASd,GAAO,GAAGqB,KACzBM,UAAW9B,EAAWG,GAAOc,EAASd,GAAO,GAAGqB,UAM1Df,EAAeS,KAWN,aACRZ,GAAQE,GAAe,4BAAQK,QApEnB,WACfC,IAAMiB,KAAN,UAAcnC,EAAd,gEAAgFD,GAAWa,GACxFQ,MAAK,SAAAgB,GACJrB,EAAgBqB,EAASC,YAE1BC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,QA8DU,aAExB,+BACK7B,GAAQA,EAAKgC,KAAI,SAAApC,GACjB,OAAO,4BACJ,4BAAKA,EAAGqC,WACR,4BAAKrC,EAAGsC,UACR,4BAAKtC,EAAGqB,OACR,4BAAKrB,EAAGC,OACR,4BAAKD,EAAGkB,aAAakB,KAAI,SAAAG,GAAI,OAAI,6BAAMA,YAK/C,+BACGjC,GAAeA,EAAY8B,KAAI,SAAApC,GAC9B,OAAO,4BACH,4BAAKA,EAAGC,OACR,4BAAKD,EAAGsC,UACR,4BAAKtC,EAAGqB,OACR,4BAAKrB,EAAGC,OACR,4BAAKD,EAAG2B,UAAUS,KAAI,SAAAG,GACpB,OACE,oCACE,6BAAMA,EAAKjB,MACViB,EAAKX,UAAUQ,KAAI,SAAAR,GAAS,OAAI,6BAAMA,gBAQpDpB,GAAgB,0CAAgBA,KC7GnBgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdrB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMqB,c","file":"static/js/main.9555b6c4.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport axios from \"axios\";\n\nconst API_KEY = '210f1d1b-a5b6-48be-b30b-e3f44e2c6da7'\nconst API_Domain = 'http://api.candidate.schoolfamilymedia.com'\n\nconst ObjectStateFactory = (data, isArray) => {\n  const DataResult = {}\n  data.forEach(el => {\n    DataResult[el.state] = isArray ? [] : {}\n  })\n  return DataResult;\n}\n\nfunction App() {\n\n  const [list, setList] = useState();\n  const [dataForPost, setDataForPost] = useState();\n  const [postResponse, setPostResponse] = useState();\n\n  const postData = () => {\n    axios.post(`${API_Domain}/assessments/results/5e4d7467447f254bbda26ff0?apiKey=${API_KEY}`, dataForPost)\n      .then(response => {\n        setPostResponse(response.success)\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  const SortData = () => {\n\n      const DataResult = ObjectStateFactory(list);\n      const DataMass = ObjectStateFactory(list,true);\n      let PostData = [];\n  \n      list.forEach(element => {\n        element.availability.forEach(availability => {\n          DataResult[element.state].hasOwnProperty(availability) \n          ?\n            DataResult[element.state][availability].push(element.email)\n          :\n            DataResult[element.state][availability] = [element.email]\n        })\n      })\n  \n      for(let state in DataResult){\n        for(let date in DataResult[state]){\n          DataMass[state].push({length: DataResult[state][date].length, date: date})\n        }\n      }\n  \n      for(let state in DataResult){\n        DataMass[state].sort((a, b) => {\n          if (a.length < b.length) {\n            return 1;\n          }\n          if (a.length > b.length) {\n            return -1;\n          }\n          return 0;\n        });\n      }\n      \n      for(let state in DataResult){\n        PostData.push({\n          state,\n          bestDates: [\n              {\n                date: DataMass[state][0].date,\n                attendees: DataResult[state][DataMass[state][0].date],\n              }\n            ]\n        })\n      }\n\n      setDataForPost(PostData)\n  }\n\n  const getData = () => {\n    axios.get(`${API_Domain}/assessments/poll/5e4d7467447f254bbda26ff0?apiKey=${API_KEY}`)\n      .then(({ data }) => { setList(data) });\n  }\n\n  return (\n    <div className=\"App\">\n      <button onClick={getData}>Get Data</button>\n      {list && <button onClick={SortData}>Sort Data</button>}\n      {list && dataForPost && <button onClick={postData}>Post Data</button>}\n\n      <table>\n          {list && list.map(el => {\n           return <tr>\n              <td>{el.firstName}</td>\n              <td>{el.lastName}</td>\n              <td>{el.email}</td>\n              <td>{el.state}</td>\n              <td>{el.availability.map(item => <div>{item}</div>)}</td>\n            </tr>\n          })}\n      </table>\n\n      <table>\n        {dataForPost && dataForPost.map(el => {\n          return <tr>\n              <td>{el.state}</td>\n              <td>{el.lastName}</td>\n              <td>{el.email}</td>\n              <td>{el.state}</td>\n              <td>{el.bestDates.map(item => {\n                return(\n                  <>\n                    <div>{item.date}</div>\n                    {item.attendees.map(attendees => <div>{attendees}</div>)}\n                  </>\n                )\n              })}</td>\n            </tr>\n          })}\n      </table>\n\n      {postResponse && <div>Response: {postResponse}</div>}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}